# Basic vars
set hidden
set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already
set scrolloff 10
set icons
set info size
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set ratios 1:3:4

set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
&stpvimg --listen $id

# cmds/functions
# Makes use of file extensions for easier application control
cmd open ${{
    case "$f" in
        *.bmp|*.jpg|*.jpeg|*.png|*.xpm|*.webp|*.gif|*.tif|*.ico)
            # sxiv -a "$f" ;;
            rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | nsxiv -aio 2>/dev/null | lf-select ;;
        *.wav|*.mp3|*.flac|*.m4a|*.wma|*.ape|*.ac3|*.og[agx]|*.spx|*.opus|*.as[fx]|*.mka)
            mpv --audio-display=no "$f" ;;
        *.avi|*.mp4|*.wmv|*.dat|*.3gp|*.ogv|*.mkv|*.mpg|*.mpeg|*.vob|*.fl[icv]|*.m2v|*.mov|*.webm|*.ts|*.mts|*.m4v|*.r[am]|*.qt|*.divx)
            mpv "$f" -quiet >/dev/null 2>&1 ;;
        *.odt|*.ods|*.odp|*.sxw|*.doc|*.docx|*.ppt|*.pptx|*.rtf)
            setsid -f libreoffice "$fx" >/dev/null 2>&1 ;;
        *.xls|*.xlsx|*.csv)
            sc-im "$fx" ;;
        *.pdf|*.epub)
            setsid -f okular "$f" >/dev/null 2>&1 ;;
        *.tgz|*.tar.gz|*.tar.bz2|*.tbz2|*.tar.txz|*.txz|*.tar|*.zip|*.jar|*.war|*.ear|*.oxt|*.rar|*.7z)
            atool -l "$fx" | less ;;
        *.iso)
            iso-info --no-header -l "$f" | less ;;
        *.svg)
            setsid -f inkscape "$f" >/dev/null 2>&1 ;;
        *.svgz)
            setsid -f write_stylus "$f" ;;
        *.html)
            setsid -f brave "$fx" ;;
        *)
            $EDITOR "$fx" ;;
    esac
}}

cmd open-with %"$@" $fx

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper  ${{
  feh --no-fehbg --bg-fill "$f"
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 5 | fzf --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd fzf-marks ${{
  dir="$(cat $HOME/.fzf-marks | fzy | cut -d' ' -f 3)"
  lf -remote "send $id cd \"$dir\""
}}

cmd add_to_repo ${{
  git --git-dir=$HOME/.local/share/dotrice --work-tree=$HOME add "$fx"
}}

cmd remove_from_repo ${{
  git --git-dir=$HOME/.local/share/dotrice --work-tree=$HOME rm -rf --cached "$fx"
}}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  for file in "$fx"
  do
      case "$file" in
        *.zip) unzip "$file" ;;
        *.tar.xz) tar -xf "$file" ;;
        *.tar.gz) tar -xzvf "$file" ;;
        *.tar.bz2) tar -xjvf "$file" ;;
        *.tar) tar -xvf "$file" ;;
        *.tar.zst) tar -xvf "$file" ;;
        *.rar) unrar x "$file";;
        *) echo "Unsupported format" ;;
      esac
  done
}}

cmd zip ${{
  set -f
  mkdir $f-zip
  cp -r $fx $f-zip
  (cd $f-zip/ && zip -r9 $f.zip .)
  rm -rf $f-zip/
}}

cmd tar ${{
  set -f
  mkdir $f-tz
  cp -r $fx $f-tz
  (cd $f-tz && tar cvf $f.tar .)
  rm -rf $f-tz
}}

cmd targz ${{
  set -f
  mkdir $f-tgz
  cp -r $fx $f-tgz
  (cd $f-tgz && tar cvzf $f.tar.gz .)
  rm -rf $f-tgz
}}

cmd tarbz2 ${{
  set -f
  mkdir $f-tbz2
  cp -r $fx $f-tbz2
  (cd $f-tbz2 && tar cjvf $f.tar.bz2 .)
  rm -rf $f-tgz
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd clear_trash %trash-empty

cmd bulk_rename ${{
  bulk-rename $( printf '%s\n' "$fx" )
}}

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c

# File Openers
map e $vscodium "$fx"
map V $emacsclient -c -a 'emacs' "$fx"
map u $view "$f"
map ` push :open-with<space>

# TERMINAL
map w $setsid -f $TERMINAL >/dev/null 2>&1

# VSCODIUM

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Git repo
map ga add_to_repo
map gr remove_from_repo

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
map f :fzf_jump
map i :fzf-marks
map o open-with

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

# map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
map br bulk_rename
map r rename
map H top
map L bottom
map R reload
map cc clear
map U unselect

# Symlinking
map P :link

# Source Bookmarks
source "~/.config/lf/shortcutrc"
