# -*- editorconfig-conf -*-
# Basic vars
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set preview true
set hidden true
set drawbox true
set ignorecase true
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# setup file previewer
set previewer stpv
set cleaner stpvimgclr
&stpvimg --listen $id

# opener
cmd open ${{
  case "$f" in
    *.bmp | *.jpg | *.jpeg | *.png | *.xpm | *.webp | *.gif | *.tif | *.ico)
      rotdir "$f" | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | nsxiv -aio 2>/dev/null | lf-select
      ;;
    *.wav | *.mp3 | *.flac | *.m4a | *.wma | *.ape | *.ac3 | *.og[agx] | *.spx | *.opus | *.as[fx] | *.mka)
      mpv --audio-display=no "$f"
      ;;
    *.avi | *.mp4 | *.wmv | *.dat | *.3gp | *.ogv | *.mkv | *.mpg | *.mpeg | *.vob | *.fl[icv] | *.m2v | *.mov | *.webm | *.ts | *.mts | *.m4v | *.r[am] | *.qt | *.divx)
      mpv "$f" -quiet >/dev/null 2>&1
      ;;
    *.odt | *.ods | *.odp | *.sxw | *.doc | *.docx | *.ppt | *.pptx | *.rtf)
      setsid -f libreoffice "$f" >/dev/null 2>&1
      ;;
    *.xls | *.xlsx | *.csv)
      sc-im "$f"
      ;;
    *.pdf | *.epub)
      $READER "$f" >/dev/null 2>&1
      ;;
    *.tgz | *.tar.gz | *.tar.bz2 | *.tbz2 | *.tar.txz | *.txz | *.tar | *.zip | *.jar | *.war | *.ear | *.oxt | *.rar | *.7z)
      atool -l "$f" | less
      ;;
    *.iso)
      iso-info --no-header -l "$f" | less
      ;;
    *.svg)
      inkscape "$f" >/dev/null 2>&1
      ;;
    *)
      $EDITOR "$f"
      ;;
  esac
}}

# COMMANDS
# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"
cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --ansi --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else 
        cmd="select"                                                       
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_open $$(find . -name "$1" | fzf | xargs -I $EDITOR {})
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd unarchive ${{
  case "$fx" in
      *.zip|*.tar.gz|*.tar.bz2|*.tar|*.rar) aunpack "$fx" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %apack "$f.zip" $(printf "$f" | grep -o '[^/]*$')
cmd tar %apack "$f.tar" $(printf "$f" | grep -o '[^/]*$')

cmd dragon %setsid -f dragon-drag-and-drop -a -x $fx
cmd dragon-stay %setsid -f dragon-drag-and-drop -a $fx
cmd dragon-individual %setsid -f dragon-drag-and-drop $fx
cmd cpdragon %setsid -f cpdragon
cmd mvdragon %setsid -f mvdragon

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd apparish_jump ${{
  res="$(source "$HOME/.config/shell/apparix" 2&>/dev/null && apparish | awk '{ print $3}' | sort | fzf --header "Jump to Bookmark:" )"
  lf -remote "send $id cd \"$res\""
}}

# MAPPINGS
## Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# Fuzzy finder
map o :fzf
map f :fzf_jump

# Open new term in current directory
map w $setsid -f $TERMINAL

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm mvdragon
map dc cpdragon
map dl dlfile

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
map o open_config
map br $bulk-rename $fx
map r rename
map H top
map L bottom
map R reload
map cc clear
map U unselect

# Movements
map gc cd ~/.config
map gC cd ~/.local/share/cell
map gl cd ~/.local

map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share

map gd cd ~/documents
map gD cd ~/dl
map gv. cd ~/vids
map gp. cd ~/pix

map gm apparish_jump

map \;j cd ~
