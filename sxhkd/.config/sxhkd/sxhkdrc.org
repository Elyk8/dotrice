#+title: Sxhkdrc
#+property: header-args :tangle sxhkdrc :async conf
#+auto_tangle: t

#+begin_src conf
# -*- conf -*-
#+end_src

* Table of Contents :toc:
- [[#sxhkd][Sxhkd]]
- [[#bspwm][Bspwm]]
- [[#frequent-bindings][Frequent Bindings]]
- [[#emacsa][Emacsa]]
- [[#super--space-followed-by-o-opening][=Super + space= followed by =O=, opening.]]
- [[#super--space-followed-by-p-dmenu-scripts][=Super + space= followed by =p=, dmenu scripts.]]
- [[#super--space-followed-by--system-bindings][=Super + space= followed by =;=, system bindings]]
- [[#xf86-bindings][XF86 Bindings]]
- [[#media-control][Media control]]
- [[#super--function-keys][=super += function keys]]

* Sxhkd

My =sxhkd= bindings, mostly revolving around the =super + space= leader key. I find
it more ergonomic than holding =super= and then pressing another key to launch
other applications. This also frees up keys for window manager control key
bindings.

This is to provide a helper function

#+begin_src conf
# Show sxhkd keybindings in dmenu
super + slash
        sxhkd-help
#+end_src

* Bspwm

If ever we are using bspwm

#+begin_src conf
# BSPWM: Focus the node in the given direction
super + {_,shift + }{h,j,k,l}
      emacs-bspwm-integration node -{f,s} {west,south,north,east}

# preselect the direction
super + ctrl + {h,j,k,l}
      emacs-bspwm-integration node -p {west,south,north,east}

super + alt + control + {h,j,k,l} ; {0-9}
      bspc node @{west,south,north,east} -r 0.{0-9}

super + alt + p
      bspc config focus_follows_pointer {true,false}

# Smart resize, will grow or shrink depending on location. Will always grow for floating nodes.
super + ctrl + alt + {Left,Down,Up,Right}
  n=10; \
  { d1=left;   d2=right;  dx=-$n; dy=0;   \
  , d1=bottom; d2=top;    dx=0;   dy=$n;  \
  , d1=top;    d2=bottom; dx=0;   dy=-$n; \
  , d1=right;  d2=left;   dx=$n;  dy=0;   \
  } \
  bspc node --resize $d1 $dx $dy || bspc node --resize $d2 $dx $dy

# focus or send to the given desktop
super + {_,shift + }{1-9}
      bspc {desktop -f,node -d} '^{1-9}'

super + {Left,Down,Up,Right}
      bspc node -v {-20 0,0 20,0 -20,20 0}

# Force window to tiled/pseudo_tiled
super + {t,shift + t}
      bspc node -t {tiled,pseudo_tiled}

# Toggle floating
super + g
      bspc node focused.floating -t tiled || bspc node focused.!floating -t floating

# Toggle fullscreen
super + f
      bspc node focused.fullscreen -t tiled || bspc node focused.!fullscreen -t fullscreen

# close and kill
super + {_,shift + }q
      emacs-bspwm-integration node -{c,k}

# quit/restart bspwm
super + alt + {q,r}
      bspc {quit,wm -r}

~button1
    bspc node -f pointed

# Emacs splitting (TODO: Integrate with bspwm)
super + {s,v}
      [ "$(xdotool getactivewindow getwindowclassname)" = "Emacs" ] && emacsclient -e "(evil-window-{_,v}split)" || exit 1

# Swapping focus among monitors
super + {w,e}
      bspc monitor -f {prev,next}
#+end_src

* Frequent Bindings

These are keybindings which one uses the most. Thus we want as fewer key-presses as possible

#+begin_src conf
# Open desktop applications
super + space ; space
      dm-j4dmenu-desktop

# Dmenu run executables
super + space ; d
      dmenu_run -bw 0

# Open terminal emulator
super + space ; t
      samedirall $TERMINAL

# Open lf file manager
super + space ; r
      samedirall $TERMINAL -e lf

# Open ncmpcpp music player
super + space ; n
      dropdown "scratch-ncmpcpp" "$TERMINAL -e ncmpcpp" "1000" "700"

# Dmenu list opened windows
super + space ; b
      dm-win

# Open Firefox
super + space ; w
      prime-run firefox

# Open Chromium
super + space ; c
      prime-run chromium

# Toggle mute microphone
super + space ; m
      microphone toggle
#+end_src

* Emacsa

#+begin_src conf
# :Emacs - Open an emacs frame
super + space ; e ; e
      emacsclient -c -n

# :Emacs - Open emacs org daily capture
super + space ; e ; t
      emacsclient --create-frame --no-wait --eval "(org-roam-dailies-capture-today)"

# :Emacs - Open today's journal
super + space ; e ; j
      emacsclient --create-frame --no-wait --eval "(org-roam-dailies-goto-today)"

# :Emacs - Open org agenda
super + space ; e ; a
      emacsclient --create-frame --no-wait --eval "(find-file \"~/org/agenda.org\")"

# :Emacs - Open magit git client
super + space ; e ; m
      emacsclient --create-frame --no-wait --eval "(magit)"

# :Emacs - Open elfeed
super + space ; e ; f
      emacsclient --create-frame --no-wait --eval "(elfeed)"
#+end_src

* =Super + space= followed by =O=, opening.

Those are for opening common applications by pressing =super + space= and then =o=
followed by another key, depending on the application one wants to open.

#+begin_src conf
# :Openers - Discord
super + space ; o ; d
      which prime-run && prime-run discord || discord

# :Openers - AT Launcher
super + space ; o ; a
      atlauncher

# :Openers - logseq PKM
super + space ; o ; l
      logseq

# :Openers - VSCodium
super + space ; o ; v
      which prime-run && prime-run vscodium || vscodium

# :Openers - zotero
super + space ; o ; t
      pidof zotero >/dev/null && wmctrl -lx | awk '$3 ~ "Zotero" {print $1}' | head -1 | xargs -r xdotool windowactivate || zotero

# :Openers - Zoom
super + space ; o ; z
      zoom
#+end_src

* =Super + space= followed by =p=, dmenu scripts.

These are the dmenu scripts.

#+begin_src conf
# :Dmenu - Man pages
super + space ; p ; a
      dm-man

# :Dmenu - Clipmenu clipboard manager
super + space ; p ; c
      clipmenu

# :Dmenu - Open terminal in directory
super + space ; p ; d
      dm-directory

# :Dmenu - Change colorscheme
super + space ; p ; shift + c
      dm-colorscheme

# :Dmenu - Emoji selector to clipboard
super + space ; p ; e
      dm-emoji

# :Dmenu - kill application
super + space ; p ; k
      dm-kill

# :Dmenu - Mount drives
super + space ; p ; o
      dm-mount

# :Dmenu - Passmenu passwords to clipboard
super + space ; p ; p
      dm-passmenu

# :Dmenu - Radio fm
super + space ; p ; b
      dm-beats

# :Dmenu - Open scripts in $EDITOR
super + space ; p ; s
      dm-scripts

# :Dmenu - Unmount drives
super + space ; p ; u
      dm-umount

# :Dmenu - Wttr weather forecast
super + space ; p ; w
      weatherforecast
#+end_src

* =Super + space= followed by =;=, system bindings

The bindings relevant to changing wallpapers, opening pulsemixer, etc... Related to system settings.

#+begin_src conf
# :Sys - Setwallpaper Randomly from "a2n" collection
super + space ; semicolon ; a
      setwallpaper a2n

# :Sys - Setwallpaper Randomly from "dt" collection
super + space ; semicolon ; d
      setwallpaper dt

# :Sys - Setwallpaper Randomly from personal collection
super + space ; semicolon ; e
      setwallpaper elyk

# :Sys - Open pulsemixer volume manager
super + space ; semicolon ; v
      dropdown "scratch-pulsemixer" "$TERMINAL -e pulsemixer" "1000" "700"

# :Sys - Interactively setwallpaper using nsxiv
super + space ; semicolon ; w
      nsxiv -rqto $XDG_PICTURES_DIR/wallpapers/*

# :Sys - System activity
super + Escape
      sysact
#+end_src

* XF86 Bindings

Bindings related to the =Fn= key.

#+begin_src conf
# :xf86 - {Increase,Decrease} brightness
XF86MonBrightness{Up,Down}
      brightness {up,down}

# :xf86 - {Increase,Decrease} volume
XF86Audio{Raise,Lower}Volume
      volume {up,down}

# :xf86 - Mute/Unmute volume
XF86AudioMute
      volume mute

# :xf86 - Mute/Unmute microphone
XF86AudioMicMute
      mic-toggle

# :xf86 - Previous/Next/Play-pause player
XF86Audio{Prev,Next,Play}
    playerctl {previous,next,play-pause}

# :Print - Take screenshot of selection
Print ; s
      maimpick 'Selected'

# :Print - Take screenshot of current screen
Print ; c
      maimpick 'Current'

# :Print - Take screenshot of whole desktop
Print ; f
      maimpick 'Fullscreen'

# :Print - Take screenshot of selection into clipboard
Print ; shift + s
      maimpick 'Selected (copy)'

# :Print - Take screenshot of current screen into clipboard
Print ; shift + c
      maimpick 'Current (copy)'

# :Print - Take screenshot of whole desktop into clipboard
Print ; shift + f
      maimpick 'Fullscreen (copy)'
#+end_src

* Media control

For media and music control, one does not want the leader key to be used, since
one does not desire added delay when changing songs or volume.

#+begin_src conf
# :mpc -  Previous song
super + bracketleft
      mpc prev

# :mpc -  Next song
super + bracketright
      mpc next

# :mpc -  Restart song
super + shift + bracketleft
      mpc seek 0%

# :mpc -  {Increase,Decrease} volume by 2
super + {equal,minus}
      mpc volume {+,-}2 && mpc-volume

# :mpc -  Play/pause song
super + p
      mpc toggle
#+end_src

* =super += function keys

#+begin_src conf
# :function - Lock the screen
super + F1
      slock -i $(fd -atf --base-directory $HOME/pix/wallpapers/dt -0 | shuf -z -n 1)

# :function - Toggle Buckle spring keyboard sound effect
super + F2
      buckle-spring

# :function - Refresh doom configuration and restart the emacs daemon
super + F3
      restart-emacs

# :function - Refresh kmonad configuration
super + F4
      notify-send "Refreshing KMonad in 2 secs"; kmonad-refresh; notify-send "Success!"

# :function - Adjust brightness
super + {F11, F12}
      brightness {down,up}
#+end_src

